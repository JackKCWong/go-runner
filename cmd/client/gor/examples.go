package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _examples_server_unixsocket_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\xcd\x6e\xe3\x36\x10\xc7\xcf\xe4\x53\x4c\x09\x18\xa0\xb6\x0e\xe5\xf6\x68\xd4\x87\xed\xf6\x63\x8b\xb6\x8b\x20\x3e\xe4\x90\x06\x05\x2b\x8d\x64\xc2\x14\x29\x93\x54\xa4\xa0\xc8\xbb\x17\x43\x49\x46\xd2\xf4\xd2\x43\x42\x93\xf3\xf5\xe3\x9f\x33\xea\x75\x75\xd6\x2d\x02\x4e\xba\xeb\x2d\x46\xce\x4d\xd7\xfb\x90\x40\x72\x26\x2a\xef\x12\x4e\x49\x70\x26\x1a\xab\xdb\xbc\x76\x79\xeb\x70\x5d\xca\x53\x4a\x3d\xfd\xf6\x71\xfe\x5f\x46\xd3\x3a\x6d\x69\x13\x9f\x5d\x25\x78\xc1\x79\x33\xb8\x0a\x3a\x6d\x9c\x2c\xe0\x6f\xce\x06\x67\xa6\xe8\xab\x33\xec\x0f\x40\x89\xd5\x31\x05\xe3\x5a\x29\x56\x83\xd8\x82\xa0\xbf\x5e\xa7\x13\x24\x0f\x74\x0e\x64\xc0\x24\x0a\xce\x59\x0e\xba\xd5\x21\xa2\xa4\xad\x69\xc0\xa2\x93\x1f\xd6\xf0\x02\x0e\x07\xd8\x51\x25\xd6\x74\x49\xdd\x06\xe3\x92\x75\x52\x74\x26\x46\xe3\x5a\x08\x78\x19\x4c\xc0\x1a\x7a\x1d\x74\x17\x45\xf1\xda\xb1\x91\x62\x88\xba\xc5\x3d\x6c\x22\xdc\x5c\x51\x4b\x62\x29\x93\x2f\x67\x8c\x3f\x9c\xd8\x82\x8f\xea\x63\x68\xe3\xc3\xee\x91\x32\xf8\xa8\x7e\x9c\x4c\x92\xbb\x82\xb3\x17\xce\x19\x86\x40\x17\xf4\x51\xdd\x61\xe7\x9f\xf0\x15\x5f\x46\x26\xfb\x57\x07\x70\xc6\xbe\x25\x6d\xa4\x68\xb4\xb1\x58\xd3\xcd\x43\x0e\x05\xe3\x6e\x86\x88\x59\x02\xe2\xda\xc2\xe6\x22\xb6\x70\x4d\xb8\xa5\x64\x4b\x59\x6b\x62\x42\x87\x21\x9f\x11\x80\xc3\xa4\x7e\xcb\x87\xb3\xc0\xaf\x03\xff\x07\xc9\x9c\x17\xbc\x83\x4d\x54\x14\xb2\x87\xcd\x25\xcb\xf0\x0e\xe3\x2a\xc5\x37\x33\x13\x67\xdd\x30\x11\x0a\xf5\x8a\xfa\x82\xe3\x11\xc3\x13\xfe\x3e\x4c\xb2\xc8\x26\xf5\x59\xbb\xda\xe2\x4f\x83\xab\xa4\x28\xdb\x80\x98\x8c\x6b\xc5\x16\xa8\x6f\xe4\x38\x87\xdd\x61\xec\xbd\x8b\x78\x1f\x4c\xa2\xdb\x05\xbc\xc0\x87\xc5\x72\x19\x30\xa6\xdc\x5a\x6c\x54\xd9\xe1\x33\xea\x1a\x83\xfc\x76\x47\xaf\xb1\x1e\xca\x87\xc7\xbf\x9e\x13\x4a\x71\x42\x6b\x3d\x8c\x3e\xd8\x5a\x14\xc4\x48\x5d\x14\x09\x2a\x5c\x31\x33\x63\xa0\x94\x33\x5d\xd8\x43\x37\x4c\xdb\x59\xe4\x27\x1d\x60\x6c\x81\x1a\x5c\xdd\x6b\x93\x7e\x0e\x7e\xe8\x39\x2b\xcb\xf5\xc1\xe6\x2e\x81\xf1\x84\x0e\x70\x32\x89\x33\xca\x14\x4d\x5b\x9d\xb4\xa3\x1a\x9d\x3e\xa3\xcc\x1b\x1f\xd5\x31\x8f\x4c\x31\x7b\x38\x6d\xd5\x17\x9f\x4c\xf3\x2c\x17\xff\xdc\x69\xbf\xb8\x84\x21\x0c\x7d\xca\xbb\x5f\x8d\xcd\xfe\x63\xab\x3e\xd6\x75\x16\x9a\xb5\x7e\x16\x6c\x16\x82\xd5\xd8\x20\x51\xaa\x1f\xbc\xa3\x39\x61\xff\x9a\x86\x3e\x60\x8c\xf0\x29\x05\xfb\xf5\x27\x7a\x60\xc2\x54\x79\x16\xd8\x77\x37\x4b\xe5\x77\x41\x8b\x7b\x8e\xc5\x7a\x71\xaf\xac\x8f\xb8\xc2\xe6\x93\x59\x4b\x75\x3c\x0d\xa9\xf6\xa3\x93\xcb\x97\x44\x7d\xaf\xab\x73\x1b\xfc\xe0\x6a\x59\x64\xc7\xff\x9e\x0e\xf6\x22\x97\x6e\xfe\x13\x0e\xb0\x26\xa3\x45\xae\xed\x5d\x70\xba\x3b\x69\x4f\xae\x6f\x18\xe3\x52\x15\x2a\x4f\xdf\xb4\x84\xb5\x28\xf8\x0b\xff\x27\x00\x00\xff\xff\xd0\x65\xcb\xcc\xeb\x04\x00\x00")

func examples_server_unixsocket_go() ([]byte, error) {
	return bindata_read(
		_examples_server_unixsocket_go,
		"examples/server-unixsocket.go",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"examples/server-unixsocket.go": examples_server_unixsocket_go,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"examples": &_bintree_t{nil, map[string]*_bintree_t{
		"server-unixsocket.go": &_bintree_t{examples_server_unixsocket_go, map[string]*_bintree_t{
		}},
	}},
}}
